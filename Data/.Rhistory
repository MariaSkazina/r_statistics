airquality[is.na(airquality)] == 0
head(iris)
aov_result <- apply(iris[, 1:4], 2, function(x) aov(x ~ iris$Species))
apply(iris[, 1:4], 2, function(x) aov(x ~ iris$Species))
View(aov_result)
norm_test_p <- apply(iris[, 1:4], 2,
function(x) shapiro.test(x)$p.value)
apply(iris[, 1:4], 2, function(x) shapiro.test(x)$p.value)
list(x = c(rnorm(30), NA), y = rnorm(10))
my_list <- list(x = c(rnorm(30), NA), y = rnorm(10))
lapply(my_list, mean)
my_list <- list(x = c(rnorm(30)), y = rnorm(10))
lapply(my_list, mean)
my_list <- list(x = rnorm(30), y = rnorm(10))
lapply(my_list, mean)
my_list <- list(x = rnorm(30), y = rnorm(10))
lapply(my_list, mean)
lapply(my_list, mean, na.rm = T)
my_list <- list(x = c(rnorm(30), NA), y = rnorm(10))
lapply(my_list, mean)
lapply(my_list, mean, na.rm = T)
sapply(my_list, range, na.rm = T, simplify = F)
sapply(my_list, range, na.rm = T, simplify = F)
sapply(my_list, range, na.rm = T, simplify = T)
cars <- c("Mazda", "Volga", "Merc")
car <- "Mazda RX4"
by(iris[1:4], iris$Species,
function(x) sapply(x,
function(col) shapiro.test(col)$p.value))
apply(iris[, 1:4], 2,
function(x) shapiro.test(x))
norm_test <- apply(iris[, 1:4], 2,
function(x) shapiro.test(x))
test_data <- as.data.frame(list(V1 = c(52, 58, 34, 44, 47, 33, 38, 34, 50, 49), V2 = c(41, 35, 49, 45, 55, 34, 45, 56, 37, 26), V3 = c("A", "A", "B", "A", "B", "B", "B", "A", "A", "B"), V4 = c("B", "A", "A", "A", "B", "A", "A", "A", "A", "B"), V5 = c(33, 39, 35, 42, 40, 27, 39, 39, 30, 40), V6 = c(41, 52, 38, 47, 44, 39, 45, 45, 47, 29), V7 = c(26, 28, 33, 36, 42, 49, 47, 47, 33, 40), V8 = c(42, 40, 33, 46, 42, 52, 47, 35, 34, 31)))
general_mean <- 10
one_sample_t <- function(test_data, general_mean){
y <- unlist(lapply(test_data, is.numeric, t.test(test_data, mu=general_mean)))
x <- sapply(y, '[','t', 'df', 'p.value')
x
}
one_sample_t(test_data, general_mean)
sapply(y, '[','t', 'df', 'p.value')
one_sample_t(test_data, general_mean)
one_sample_t <- function(test_data, general_mean){
y <- unlist(lapply(test_data, is.numeric, t.test(test_data, mu=general_mean)))
sapply(y, '[','t', 'df', 'p.value')
}
one_sample_t(test_data, general_mean)
x <- subset(test_data, is.numeric(test_data))
x <- subset(is.numeric(test_data))
subset
nums <- unlist(lapply(test_data, is.numeric))
x <- test_data[,nums]
unlist(lapply(x, t.test(test_data, mu=general_mean)))
x, t.test(x, mu=general_mean
lapply(x, t.test(x, mu=general_mean
lapply(x, t.test(x, mu=general_mean))
(lapply(x, t.test(x, mu=general_mean)))
t.test(x)
sapply(x, t.test)
lapply(x, t.test)
res <- lapply(x, t.test)
sapply(res, '[', 'p.value')
sapply(res, '[','t','df','p.value')
sapply(res, '[',"t","df",'p.value')
lapply(res, '[',"t","df",'p.value')
lapply(res, c("t","df",'p.value'))
lapply(res, '[[[',"t","df",'p.value')
lapply(res, '[[',"t","df",'p.value')
lapply(res, '[','t','df','p.value')
apply(res, '[','t','df','p.value')
apply(res, ['t','df','p.value'])
apply(res, [c('t','df','p.value')])
sapply(res, [c('t','df','p.value')])
sapply(res, res[c('t','df','p.value')])
res[c('t','df','p.value')]
res['t','df','p.value']
res[c('t','df','p.value')
res[c('t','df','p.value')]
sapply(res, res[[c('t','df','p.value')]])
sapply(res, res[[c(t,df,p.value)]])
sapply(res, '[' , 'p.value'))
sapply(res, '[' , 'p.value')
sapply(res, '[', 'p.value', '[', 'df')
lapply(res, '[', 'p.value', '[', 'df')
lapply(res, '[', 'p.value')
lapply(res, '[', 'p.value') + lapply(res, '[', 'df')
lapply(res, '[', 'p.value') & lapply(res, '[', 'df')
lapply(res, '[', 'df')
lapply(res, '[', 'df')
get_value <- function(test_list){
lapply(res, '[', 'p.value')
lapply(res, '[', 'df')
}
lapply(res, '[', 'df')
res <- unlist(lapply(x, t.test))
lapply(res, '[', 'p.value')
res <- lapply(x, t.test, mu=general_mean))
res <- lapply(x, t.test, mu=general_mean)
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric)) #сделали логический вектор на предмет численный или нет
x <- test_data[,nums] #отобрали только численные значения
res <- lapply(x, t.test, mu=general_mean)
y <- unlist(lapply(x, t.test(x, mu=general_mean))) #посчитали критерий Стьюдента с заданным средним генеральной совокупности
lapply(res, '[','t', 'df', 'p.value') #пытаюсь выцепить три нужных значения
}
one_sample_t(test_data, general_mean)
general_mean <- 10
one_sample_t(test_data, general_mean)
one_sample_t(test_data, general_mean)
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric)) #сделали логический вектор на предмет численный или нет
x <- test_data[,nums] #отобрали только численные значения
res <- lapply(x, t.test, mu=general_mean) #посчитали критерий Стьюдента с заданным средним генеральной совокупности
lapply(res, '[','t', 'df', 'p.value') #пытаюсь выцепить три нужных значения
}
one_sample_t(test_data, general_mean)
mapply(res, '[','t', 'df', 'p.value') #ЖОПА пытаюсь выцепить три нужных значения
lapply(res, '[','t', 'df', 'p.value') #ЖОПА пытаюсь выцепить три нужных значения
lapply(res, '[', 'p.value') #ЖОПА пытаюсь выцепить три нужных значения
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric)) #сделали логический вектор на предмет численный или нет
x <- test_data[,nums] #отобрали только численные значения
res <- lapply(x, t.test, mu=general_mean) #посчитали критерий Стьюдента с заданным средним генеральной совокупности
lapply(res, '[', 'p.value') #ЖОПА пытаюсь выцепить три нужных значения
}
one_sample_t(test_data, general_mean)
lapply(res, '[[', 'p.value') #ЖОПА пытаюсь выцепить три нужных значения
lapply(res, '[', 'p.value') #ЖОПА пытаюсь выцепить три нужных значения
lapply(res, '[', c('t','df','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
lapply(res, '[', c('t','df','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric)) #сделали логический вектор на предмет численный или нет
x <- test_data[,nums] #отобрали только численные значения
res <- lapply(x, t.test, mu=general_mean) #посчитали критерий Стьюдента с заданным средним генеральной совокупности
lapply(res, '[', c('t','df','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
}
one_sample_t(test_data, general_mean)
lapply(res, `[`, c('t','df','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
res
one_sample_t(test_data, general_mean)
res <- lapply(x, t.test, mu=10) #посчитали критерий Стьюдента с заданным средним генеральной совокупности
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric)) #сделали логический вектор на предмет численный или нет
x <- test_data[,nums] #отобрали только численные значения
res <- lapply(x, t.test, mu=10) #посчитали критерий Стьюдента с заданным средним генеральной совокупности
lapply(res, `[`, c('t','df','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
}
one_sample_t(test_data, general_mean)
lapply(res, `[[`, c('t','df','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
lapply(res, `[`, c(c('t'),c('df'),'p.value')) #ЖОПА пытаюсь выцепить три нужных значения
res
lapply(res, `[`, c('statistic', 'parameter','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
one_sample_t(test_data, general_mean)
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric)) #сделали логический вектор на предмет численный или нет
x <- test_data[,nums] #отобрали только численные значения
res <- lapply(x, t.test, mu = general_mean) #посчитали критерий Стьюдента с заданным средним генеральной совокупности
lapply(res, `[`, c('statistic', 'parameter','p.value')) #ЖОПА пытаюсь выцепить три нужных значения
}
one_sample_t(test_data, general_mean)
install.packages("corrplot")
install.packages("psych")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("MASS")
install.packages("DAAG")
install.packages("carData")
install.packages("effsize")
install.packages("prw")
install.packages("pwr")
c <- cabbages(MASS)
library(MASS)
cabbages
cor.test(HeadWt, VitC, method = spearman)
cor.test(cabbages$HeadWt, cabbages$VitC, method = "spearman")
cor.test(cabbages$HeadWt, cabbages$VitC, method = "spearman")
sd(c59)
sd(cabbages$c59)
# имеется отрицательная коррелляция между весом кабачка и содержанием в нем витамина C
library(stats)
sd(cabbages$c59)
sd(subset(cabbages, Cult=c59)
sd(subset(cabbages, Cult==c59)
sd(subset(cabbages, Cult==c59))
sd(subset(cabbages, Cult==c39))
sd(subset(cabbages, Cult = c39))
sd(cabbages, Cult = c39)
c39 <- subset(cabbages, Cult = c39)
View(c39)
View(c39)
c39 <- select(filter(cabbages, Cult == c39))
c39 <- filter(cabbages, Cult == c39)
library(dyplyr)
c39 <- filter(cabbages, Cult == c39)
library(dplyr)
c39 <- filter(cabbages, Cult == c39)
c39 <- select(cabbages, Cult == c39)
c39 %>% select(cabbages, Cult == c39)
c39 %>% select(cabbages, Cult == "c39")
c39 %>% select(cabbages, Cult = "c39")
sd(cabbages$Cult)
sd(cabbages$Cult)
#отрицательная корелляция
cor.test(rock$UCS, rock$gs)
knitr::opts_chunk$set(echo = TRUE)
head(glacier)
glacier <- read.csv('/home/maria/Bioinf/R/glacier.csv', na.strings = "..", comment.char = "#")
head(glacier)
View(glacier)
View(glacier)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, eval=FALSE)
1:4 ^ 2
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, eval=FALSE)
glacier <- read.csv('/home/maria/Bioinf/R/glacier.csv', na.strings = "..", comment.char = "#")
library(dplyr)
glacier <- read.csv('/home/maria/Bioinf/R/glacier.csv', na.strings = "..", comment.char = "#")
head(glacier)
glacier <- read.csv('/home/maria/Bioinf/R/glacier.csv', na.strings = "..", comment.char = "#")
glacier_sorted <- arrange(glacier, Ref_Date)
View(glacier_sorted)
View(glacier_sorted)
View(glacier)
View(glacier)
find <- filter(glacier, NA)
find <- filter(glacier, is.na = TRUE)
find <- filter(glacier, is.na == TRUE)
find <- filter(glacier, MEASURE, is.na == TRUE)
find <- filter(glacier, MEASURE, is.na == TRUE)
nrow(glacier$GEO)
nrow(filter(glacier, GEO == "White Glacier")
q
YEAR <- glacier %>% group_by(GEO) %>% mutate(count = n())
View(YEAR)
View(YEAR)
answer <- glacier %>% group_by(GEO) %>% mutate(mean(Value))
answer <- glacier %>% group_by(GEO) %>% mutate(mean(as.numeric(Value))
q
answer <- glacier %>% group_by(GEO) %>% mutate(mean(as.numeric(Value)))
answer <- glacier %>% group_by(GEO) %>% mutate(mean(as.numeric(as.character(Value))))
dat_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE) # делаю список из файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)
d <- read.csv(myfiles[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles[-1]){
dd <- read.csv(i)
j <- j +1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
}
dat_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
read.csv(myfiles[1])
dat_csv <- ldply(d, read_csv) # создали один большой csv по списку файлов в директории
library(plyr)
library(dplyr)
library(readr)
library(ggplot2)
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE) # делаю список из файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)
d <- read.csv(myfiles[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles[-1]){
dd <- read.csv(i)
j <- j +1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dat_csv <- ldply(d, read_csv)
}
dat_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE) # делаю список из файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)
d <- read.csv(myfiles[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles[1]){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dat_csv <- ldply(myfiles, read_csv)
}
dat_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE) # делаю список из файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)
d <- read.csv(myfiles[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles[1]){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
dat_csv <- ldply(myfiles, read_csv)
}
dat_csv <- ldply(d, read_csv) # создали один большой csv по списку файлов в директории
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE)#список путей до файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)#список названий файлов
d <- read.csv(myfiles[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles[j]){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
dat_csv <- ldply(myfiles, read_csv)
}
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
View(dat1_csv)
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE)#список путей до файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)#список названий файлов
#d <- read.csv(myfiles[1])
#d$name <- myfiles2[1]
j <- 1
for (i in myfiles[j]){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
dat_csv <- ldply(myfiles, read_csv)
}
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE)#список путей до файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)#список названий файлов
#d <- read.csv(myfiles[1])
#d$name <- myfiles2[1]
j <- 1
for (i in myfiles){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
dat_csv <- ldply(myfiles, read_csv)
}
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE)#список путей до файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)#список названий файлов
d <- read.csv(myfiles[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
dat_csv <- ldply(myfiles, read_csv)
}
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=TRUE)#список путей до файлов в директории
myfiles2 <-list.files(path = mydir, pattern="*.csv", full.names=FALSE)#список названий файлов
d <- read.csv(myfiles[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dat_csv <- ldply(d, read_csv) # создали один большой csv по списку файлов в директории
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
myfiles2
myfiles2
myfiles2
list.files(path = mydir, pattern="*.csv", full.names=FALSE)
list.files(path = mydir, pattern="*.csv", full.names=FALSE)
list.files(path = mydir, pattern="*.csv", full.names=FALSE)
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
myfiles2 <- list.files(path = mydir, pattern="*.csv", full.names=FALSE) #список названий файлов
myfiles2 <- list.files(path = '/home/maria/Bioinf/r_statistics/Data', pattern="*.csv", full.names=FALSE) #список названий файлов
myfiles2
read.csv(myfiles2[1])
d <- read.csv(myfiles2[1])
myfiles2[1]
d$name <- myfiles2[1]
d
d <- read.csv(myfiles2[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles2[-1]){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
myfiles2[-1])
myfiles2[-1]
d <- read.csv(myfiles2[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles2[-1]){
dd <- read.csv(i)
j <- j + 1
i <- i + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
d <- read.csv(myfiles2[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles2[2:nrow]){
dd <- read.csv(i)
j <- j + 1
i <- i + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
d <- read.csv(myfiles2[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles2){
dd <- read.csv(i)
j <- j + 1
i <- i + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
myfiles2 <- list.files(path = '/home/maria/Bioinf/r_statistics/Data', pattern="*.csv", full.names=FALSE) #список названий файлов
d <- read.csv(myfiles2[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles2[1]){
dd <- read.csv(i)
j <- j + 1
i <- i + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
d <- read.csv(myfiles2[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles2[2]){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
dd
d <- read.csv(myfiles2[1])
d$name <- myfiles2[1]
j <- 1
for (i in myfiles2[2]){
dd <- read.csv(i)
j <- j + 1
dd$name <- myfiles2[j]
d <- rbind(d, dd)
}
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=FALSE) #список путей до файлов в директории
dat_csv <- ldply(d, read_csv) # создали один большой csv по списку файлов в директории
}
dat1_csv <- merge_csv('/home/maria/Bioinf/r_statistics/Data')
merge_csv <- function(x){
setwd(x)
mydir = x
myfiles <- list.files(path = mydir, pattern="*.csv", full.names=FALSE) #список путей до файлов в директории
dat_csv <- ldply(myfiles, read_csv) # создали один большой csv по списку файлов в директории
}
myfiles2 <- list.files(path = '/home/maria/Bioinf/r_statistics/Data', pattern="*.csv", full.names=FALSE) #список названий файлов
